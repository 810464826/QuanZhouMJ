<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="ehcache.xsd" updateCheck="false"
	monitoring="autodetect" dynamicConfig="true">

	<diskStore path="java.io.tmpdir" />

	<!-- maxElementsInMemory：缓存中允许创建的最大对象数。 eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。 
		timeToIdleSeconds：缓存数据的钝化时间，也就是在一个元素消亡之前，两次访问时间的最大时间间隔值， 这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。 
		timeToLiveSeconds：缓存数据的生存时间，也就是一个元素从构建到消亡的最大时间间隔值， 这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。 
		overflowToDisk：内存不足时，是否启用磁盘缓存。 memoryStoreEvictionPolicy：缓存满了之后的淘汰算法。LRU和FIFO算法这里就不做介绍。 
		LFU算法直接淘汰使用比较少的对象，在内存保留的都是一些经常访问的对象。对于大部分网站项目，该算法比较适用。如果应用需要配置多个不同命名并采用不同参数的Cache，可以相应修改配置文件，增加需要的Cache配置即可。 -->
	<defaultCache maxEntriesLocalHeap="10000" eternal="false"
		overflowToDisk="true" timeToIdleSeconds="20" timeToLiveSeconds="60">
	</defaultCache>

	<!-- 存放用户登录信息，过期时间 3600秒，用ehache替换session功能 -->
	<cache name="sessions" maxElementsInMemory="40000"
		maxElementsOnDisk="100000" eternal="false" timeToIdleSeconds="3600"
		timeToLiveSeconds="0" overflowToDisk="true" diskPersistent="false" />

	<!-- 存放房間信息，过期时间 3600秒 -->
	<cache name="rooms" maxElementsInMemory="10000"
		maxElementsOnDisk="100000" eternal="false" timeToIdleSeconds="3600"
		timeToLiveSeconds="0" overflowToDisk="true" diskPersistent="true" />

	<!-- 存放用户基本信息，过期时间 3600秒 -->
	<cache name="users" maxElementsInMemory="40000"
		maxElementsOnDisk="400000" eternal="false" timeToIdleSeconds="3600"
		timeToLiveSeconds="0" overflowToDisk="true" diskPersistent="true" />
		
	<!-- 存放用户信息，过期时间 3600秒 -->
	<cache name="playerInfos" maxElementsInMemory="40000"
		maxElementsOnDisk="400000" eternal="false" timeToIdleSeconds="3600"
		timeToLiveSeconds="0" overflowToDisk="true" diskPersistent="true" />
</ehcache>
